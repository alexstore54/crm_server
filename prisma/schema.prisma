generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Log {
  id         String      @id @default(uuid())
  level      LogLevel    @default(INFO)
  message    String
  context    Json?
  createdAt  DateTime    @default(now())   @db.Timestamptz(0)
}

model Lead {
  id                  Int        @id @default(autoincrement())
  statusId            Int?       
  firstname           String
  secondname          String
  country             String?
  createdAt           DateTime   @default(now()) @db.Timestamptz(0)
  defaultEmail        String?
  agentId             Int?   


  isVerified          Boolean           @db.Boolean @default(false)

  customer            Customer?
  status              LeadStatus?        @relation(fields: [statusId], references: [id])
  Phone               Phone[]
  agent               Agent?            @relation(fields: [agentId], references: [id])
}

model Customer {
  publicId            String         @unique @db.Uuid @default(uuid())
  id                  Int            @id @default(autoincrement())
  leadId              Int            @unique   
  
  emails              Email[]
  password            String
  
  lastOnline          DateTime       @db.Timestamptz(0)

  leads               Lead           @relation(fields: [leadId], references: [id])
}

model Email {
  id               Int               @id @default(autoincrement())
  email            String
  isMain           Boolean           @default(false)
  customerId       Int
  createdAt        DateTime          @default(now()) @db.Timestamptz(0)
  
  customer         Customer          @relation(fields: [customerId], references: [id])
}







model Agent {
  publicId         String    @unique @db.Uuid @default(uuid())
  id               Int       @id @default(autoincrement())
  roleId           Int?
  
  
  email            String     @db.VarChar(100)
  password         String
  lastOnline       DateTime   @db.Timestamptz(0)
  
  testRoles        TestRoleNames
  testPermissions  PermsList
  
  
  role             Role?      @relation(fields: [roleId], references: [id])

  agentPermissions AgentPermission[]

  desks            Desk[]     @relation("AgentDesks")
  leads            Lead[]
}

model Role {
  id               Int               @id @default(autoincrement())
  name             String
  

  rolePermissions  RolePermission[]
  agents           Agent[]
}

model AgentPermission {
  // Переопределение разрешений для конкретного agent
  agentId      Int
  permissionId Int
  allowed      Boolean    @default(false)

  agent        Agent      @relation(fields: [agentId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([agentId, permissionId]) // Primary Key
}


model Permission {
  id               Int      @id @default(autoincrement())
  key              String   @unique
  name             String
  description      String?
  

  rolePermissions  RolePermission[]
  agentPermissions AgentPermission[]
}

model RolePermission {
  // ManyToMany между Role и Permission
  roleId       Int
  permissionId Int
  allowed      Boolean    @default(false)

  role         Role       @relation(fields: [roleId], references: [id])
  permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([roleId, permissionId]) // Primary Key
}



model Desk {
  id     Int            @id          @default(autoincrement())
  name   String 
  agents Agent[]                     @relation("AgentDesks")
}

model LeadStatus {
  id           Int      @id        @default(autoincrement())
  name         String
  leads        Lead[]
}

model Phone {
  id         Int      @id @default(autoincrement())
  phone      String
  isMain     Boolean  @default(false)
  lead_id    Int
  
  created_at DateTime @default(now()) @db.Timestamptz(0)
  Leads      Lead    @relation(fields: [lead_id], references: [id])
}

enum LogLevel {
  INFO
  WARN
  ERROR
}



enum TestRoleNames {
  ADMIN
  MODERATOR
}

enum PermsList {
  action1
  action2
  action3
  action4
}