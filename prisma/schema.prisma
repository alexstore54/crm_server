generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Agent {
  publicId        String            @unique @default(uuid())
  id              Int               @id @default(autoincrement())
  roleId          Int
  email           String            @db.VarChar(100)
  password        String
  lastOnline      DateTime?         @db.Timestamptz(0)
  avatarURL       String?
  Role            Role              @relation(fields: [roleId], references: [id])
  AgentPermission AgentPermission[]
  Lead            Lead[]
  Desk            Desk[]            @relation("AgentDesks")
  Team            Team[]            @relation("AgentTeams")
}

model AgentPermission {
  agentId      Int
  permissionId Int
  allowed      Boolean    @default(false)
  Agent        Agent      @relation(fields: [agentId], references: [id])
  Permission   Permission @relation(fields: [permissionId], references: [id])

  @@id([agentId, permissionId])
}

model Customer {
  publicId   String    @unique @default(uuid())
  id         Int       @id @default(autoincrement())
  leadId     Int       @unique
  password   String
  lastOnline DateTime? @db.Timestamptz(0)
  avatarURL  String?
  Lead       Lead      @relation(fields: [leadId], references: [id])
  Email      Email[]
}

model Desk {
  publicId     String        @unique @default(uuid())
  id           Int           @id @default(autoincrement())
  name         String
  avatarURL    String?
  Lead         Lead[]
  LeadManagers LeadManager[]
  Teams        Team[]
  Agent        Agent[]       @relation("AgentDesks")
}

model LeadManager {
  id      Int  @id @default(autoincrement())
  deskId  Int
  agentId Int  @unique
  Desk    Desk @relation(fields: [deskId], references: [id])
}

model Email {
  id         Int      @id @default(autoincrement())
  email      String
  isMain     Boolean  @default(false)
  customerId Int
  createdAt  DateTime @default(now()) @db.Timestamptz(0)
  Customer   Customer @relation(fields: [customerId], references: [id])
}

model Lead {
  id           Int         @id @default(autoincrement())
  statusId     Int?
  firstname    String?
  lastname     String?
  country      String?
  createdAt    DateTime    @default(now()) @db.Timestamptz(0)
  defaultEmail String
  agentId      Int?
  deskId       Int?
  teamId       Int?
  isVerified   Boolean     @default(false)
  publicId     String      @unique @default(uuid())
  Customer     Customer?
  Agent        Agent?      @relation(fields: [agentId], references: [id])
  Desk         Desk?       @relation(fields: [deskId], references: [id])
  LeadStatus   LeadStatus? @relation(fields: [statusId], references: [id])
  Team         Team?       @relation(fields: [teamId], references: [id])
  Phone        Phone[]
}

model LeadStatus {
  id   Int    @id @default(autoincrement())
  name String
  Lead Lead[]
}

model Log {
  level     LogLevel     @default(INFO)
  message   String
  context   Json?
  createdAt DateTime     @default(now()) @db.Timestamptz(0)
  userId    Int?
  id        Int          @id @default(autoincrement())
  userType  LogUserType?
}

model Permission {
  id              Int               @id @default(autoincrement())
  key             String            @unique
  AgentPermission AgentPermission[]
  RolePermission  RolePermission[]
}

model Team {
  publicId  String  @unique @default(uuid())
  id        Int     @id @default(autoincrement())
  name      String
  deskId    Int
  avatarURL String?
  Leads     Lead[]
  desk      Desk    @relation(fields: [deskId], references: [id])
  Agents    Agent[] @relation("AgentTeams")
}

model Phone {
  id         Int      @id @default(autoincrement())
  phone      String
  isMain     Boolean  @default(false)
  created_at DateTime @default(now()) @db.Timestamptz(0)
  leadId     Int
  Lead       Lead     @relation(fields: [leadId], references: [id])
}

model Role {
  id             Int              @id @default(autoincrement())
  name           String
  publicId       String           @unique @default(uuid())
  isVisible      Boolean          @default(true)
  isMutable      Boolean          @default(true)
  avatarURL      String?
  Agent          Agent[]
  RolePermission RolePermission[]
}

model RolePermission {
  roleId       Int
  permissionId Int
  allowed      Boolean    @default(false)
  Permission   Permission @relation(fields: [permissionId], references: [id])
  Role         Role       @relation(fields: [roleId], references: [id])

  @@id([roleId, permissionId])
}

enum LogLevel {
  INFO
  WARN
  ERROR
}

enum LogUserType {
  AGENT
  CUSTOMER
}
